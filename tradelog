#!/bin/bash
export POSIXLY_CORRECT=yes
export LC_ALL=C

COMMAND=""		# Store arguments commands 
LOG_FILES=""		# Input file in .log format
GZ_LOG_FILES="" 	# Input file in .gz archiv
READ_INPUT=""		# Here i ll store input logs 
FILTER=""		# I ll change READ_INPUT using filter	
BEFORE_TIME="9999-99-99" # write only logs before this time 
AFTER_TIME="" 		# WRITE only logs afther this time 
WIDTH="1000"		# Value for graph printing 	
THICK=""		# Here i store tickers separate by ;
THICK_COUNT="0"		# Increment after every tick
IS_T_COM="0"		# Is there command or filter indicator
IS_T_COM_OR_FIL="0"	# Is there command or filterr 

##
# Just printi help and exit with code 0
print_help()
{
	echo "Usage: tradelog [-h|--help]"
	echo "...... tradelog [FILTER...] [COMAND] [LOG...]"
	echo "DATETIME == YYYY-MM-DD HH:MM:SS"
	echo ""
	echo "Log format:"
	echo "DATE TIME;TICKER;TYPE OF TRANSACTION;PRICE;CURRENCY;AMMOUT;ID"
	echo ""
	echo "COMMANDS"
	echo ".. list-tick .... List of stock unique echange tickers in given file."
	echo ".. profit ....... List of profit from lock positions."
	echo ".. pos .......... List of values current held positions"
	echo ".. last-price ... Print last value of every known thicker."
	echo ".. hist-ord ..... List history of transaction by thicker."
	echo ".. graph-pos .... Shov value graph of thicker. "
	echo "FILTER"
	echo ". -a DATETIME ... Only records after this date."
	echo ". -b DATETIME ... Only records before this date."
	echo ". -t TICKER ..... Only records with given thicker. You can specify multiple thickers."
	echo ". -w WIDTH ...... Define width of longest row. w > 0"

	exit 0
}

##
# Parse input arguments and COMMANDS 
argument_parser()
{
	width_indicator="0"
	if [ "$#" -eq "0" ];then
		return 0	
	fi
	while [ "$#" -gt 0 ]; do

		#COMMAND##################
		case "$1" in #COMMANDS THERE CAN BE ONLY ONE 
		list-tick | pos | profit | last-price | hist-ord | graph-pos )
			
			if [ "$IS_T_COM" -eq "1" ]; then
				echo "ERROR Multiple commands are not possible." >&2 
				exit 2	
			fi
			COMMAND="$1"
			IS_T_COM="1"	# Is there command or filter indicator
			shift; ;;
		#HELP###############
		-h)
			print_help
			;;
		--help)
			print_help
			;;
		#FILTERS#################	
		-a) #after DATETIME="YYYY-MM-DD HH:MM:SS"
			if ! [ "$(date -d "$2" +"%F %T" 2> /dev/null)" = "$2" ]; then
				echo "ERROR date should be in YYYY-MM-DD HH:DD:SS format." >&2 
				exit 2	
			fi
			IS_T_COM_OR_FIL="1"	# Is there command or filterr 
			AFTER_TIME=$2	
			shift;shift; ;;
		-b) #before DATETIME
			if ! [ "$(date -d "$2" +"%F %T" 2> /dev/null)" = "$2" ]; then
				echo "ERROR date should be in YYYY-MM-DD HH:DD:SS format." >&2 
				exit 2	
			fi
			BEFORE_TIME="$2"	# write only logs before this time 
			shift;shift; ;;
		-t) #ticker
			if [ -z "$2" ]; then
				echo "ERROR missing argument after -t" >&2 
				exit 2	
			fi
			THICK="$THICK;$2"
			THICK_COUNT=`echo "$THICK_COUNT + 1" | bc`		# Increment after every tick
			shift;shift; ;;

		-w) #width

			if [ "$width_indicator" -eq "1" ]; then
				echo "ERROR width parameter." >&2 
				exit 2	
			fi
			width_indicator="1"
			if [ "$2" -gt "0" ]; then
				WIDTH="$2"
			else
				echo "ERROR width has to be positive number." >&2 
				exit 2	
			fi
			shift;shift; ;;
		
		#LOG#################
		*) #GETING LOG FILES THERE CAN BE MULTIPLE 
			if [ `echo  "$1" | grep "\.gz"` ]; then  	#if file ends with .gz
				GZ_LOG_FILES="$1 $GZ_LOG_FILES"		
			else
				LOG_FILES="$1 $LOG_FILES"
			fi
			shift; ;;
		esac
	done
}


##
# List unique tickers that are in log
list_tick_comm()
{
	FILTER=`echo "$READ_INPUT" | awk -F ';' '{print \$2}'`
	READ_INPUT="$FILTER"	
	READ_INPUT=$(echo "$READ_INPUT" | sort -u) 
}

##
# Write sum of profits.
# Profit = sum of sell transaction - sum of buy transaction 
profit_comm()
{
	filter1=`echo "$READ_INPUT" | awk -F ';' -v a="sell" '\$3 == a {print \$0}'`
	filter2=`echo "$READ_INPUT" | awk -F ';' -v a="buy" '\$3 == a {print \$0}'`

	SUM1=`echo "$filter1" | awk -F ';' '{value = $4 * $6}{sum += value}END{printf("%f.16", sum)}'`
	SUM2=`echo "$filter2" | awk -F ';' '{value = $4 * $6}{sum += value}END{printf("%f.16", sum)}'`
	
	filter1="$SUM1;$SUM2"
	SUM1=`echo "$filter1" | awk -F ';' '{value = $1 - $2}END{printf("%.2f",value)}'`
	
	echo "$SUM1"
	exit 0
}

##
# Print actualy holden values sorted from bigest to smallest 
pos_comm()
{
	#first get thickers and count them 
	ticker=`echo "$READ_INPUT" | awk -F ';' '{print \$2}'`
	ticker=$(echo "$ticker" | sort -u) 
	sum_ticker=`echo "$ticker" | wc -l`
	
	FILTER_SUM=""
	for ((i=1; i <= $sum_ticker; i++)); do    #walk throught tickers 
		t=`echo "$ticker" | sed -n "$i"p` #get one ticker  
		
		# If ticker match with t sum it and print it 
		filer_ticker=`echo "$READ_INPUT" | awk -F ';' -v a="$t" '\$2 == a {print \$0}'`

		#GETING LAST KNOWN VALUE 
		last_line=`echo "$filer_ticker" | tail -1`
		last_value=`echo "$last_line" | awk -F ';' '{print \$4}'`

		filter_sell=`echo "$filer_ticker" | awk -F ';' -v a="sell" '\$3 == a {print \$0}'`  #sell value 
		filter_buy=`echo "$filer_ticker" | awk -F ';' -v a="buy" '\$3 == a {print \$0}'`  #sell value 
		SUM1=`echo "$filter_buy" | awk -F ';' '{value = $6}{sum += value}END{printf("%f.16", sum)}'`
		SUM2=`echo "$filter_sell" | awk -F ';' '{value = $6}{sum += value}END{printf("%f.16", sum)}'`

		filter1="$SUM1;$SUM2;$last_value"
		SUM1=`echo "$filter1" | awk -F ';' '{value = ($1-$2)*$3}END{printf("%05.22f",value)}'`
		FILTER_SUM=`echo "$FILTER_SUM" & echo "$t:$SUM1"`
	done
	#TODO nahradit %12 promenou s nejdelsim cislem
	d=`echo "$FILTER_SUM" | sort -n -r -t ':' -k 2`
	get_longest_ticker_pos

	LONG_POS=`echo -n "$LONG_POS" | wc -c`
	#echo "$d"
	#echo ""
	echo "$d" | awk -F ':' -v l="$CHARS_MAX" '{printf("%-9s :%*.2f\n"),$1, l,  $2}'
	exit 0
}


##
# list transaction history in graph format.
# width define longest line 
hist_ord_comm()
{
	ticker=`echo "$READ_INPUT" | awk -F ';' '{print \$2}'`
	ticker=$(echo "$ticker" | sort -u) 
	sum_ticker=`echo "$ticker" | wc -l`
	
	for ((i=1; i <= $sum_ticker; i++)); do    #walk throught tickers 
		t=`echo "$ticker" | sed -n "$i"p` #get one ticker  
		filter_ticker=`echo "$READ_INPUT" | awk -F ';' -v a="$t" '\$2 == a {print \$0}'`
		SUM1=`echo "$filter_ticker" | wc -l `
		
		hash_t=""
		for ((j=0; (j < $SUM1) && (j < $WIDTH); j++)); do
			hash_t=`echo "$hash_t#"`
		done
		FILTER_SUM=`echo "$FILTER_SUM" & echo "$t:$hash_t"`
	done
	d=`echo "$FILTER_SUM" | sort  -t ':' -k 1`
	echo "$d" | awk -F ':' '{printf("%-9s : %s  \n"),$1, $2}'
	exit 0
}

##
# find longest nuber in ticker pos that ll be used in graph_pos_comm()
get_longest_ticker_pos()
{
	ticker=`echo "$READ_INPUT" | awk -F ';' '{print \$2}'`;ticker=$(echo "$ticker" | sort -u) ;sum_ticker=`echo "$ticker" | wc -l`
	sum_max="0"
	CHARS_MAX="0"

	for ((i=1; i <= $sum_ticker; i++)); do    #walk throught tickers 
		t=`echo "$ticker" | sed -n "$i"p`  ;filer_ticker=`echo "$READ_INPUT" | awk -F ';' -v a="$t" '\$2 == a {print \$0}'`
		#GETING LAST KNOWN VALUE 
		last_line=`echo "$filer_ticker" | tail -1`;last_value=`echo "$last_line" | awk -F ';' '{print \$4}'`

		filter_sell=`echo "$filer_ticker" | awk -F ';' -v a="sell" '\$3 == a {print \$0}'` 
		filter_buy=`echo "$filer_ticker" | awk -F ';' -v a="buy" '\$3 == a {print \$0}'`
		sum1=`echo "$filter_buy" | awk -F ';' '{value = $6}{sum += value}END{printf("%f.16", sum)}'`
		sum2=`echo "$filter_sell" | awk -F ';' '{value = $6}{sum += value}END{printf("%f.16", sum)}'`
		
		filter1="$sum1;$sum2;$last_value"
		sum1=`echo "$filter1" | awk -F ';' '{value = (($1-$2)*$3) }END{printf("%05.22f",value)}'`;
		var=`awk 'BEGIN{ print "'$sum1'"<"0" }'` #output = 1 negative number 
		
		ch_m=`echo "$sum1" | awk -F ';' -v v="$sum1" 'END{printf("%0.2f",v)}'`;
		ch_m=` echo "$ch_m" | wc -c`
		if [ "$ch_m" -gt "$CHARS_MAX" ]; then
			CHARS_MAX="$ch_m"
		fi

		if  [ "$var" -eq "1" ]; then 
			sum1=`echo "$filter_sell" | awk -v s=$sum1  '{value = s-(2*s)}END{printf("%f", value)}'`
		fi
		sum1=`printf %.0f $sum1`
		if [ "$sum1" -gt "$sum_max" ]; then
			sum_max="$sum1"
		fi
	done
	LONG_POS=`echo "$filter_sell" | awk -v s=$sum_max -v w=$WIDTH  '{value = s}END{printf("%.2f", value)}'`
	ONE_CHAR_REPRES=`echo "$filter_sell" | awk -v s=$sum_max -v w=$WIDTH  '{value = s/w - 0.5}END{printf("%.0f", value)}'`
}
##
# List of graph values. 
# Width define longest line 
# WORKS LIKE POS BUT REPRESENT NUMBERS GRAPHICALY
graph_pos_comm()
{
	ticker=`echo "$READ_INPUT" | awk -F ';' '{print \$2}'`;ticker=$(echo "$ticker" | sort -u) ;sum_ticker=`echo "$ticker" | wc -l`
	get_longest_ticker_pos

	one_char_repesent=`echo "$filter_sell" | awk -v s=$SUM_MAX -v w=$WIDTH  '{value = s/w - 0.5}END{printf("%.0f", value)}'`
	for ((i=1; i <= $sum_ticker; i++)); do    #walk throught tickers 
		hash_t=""
		t=`echo "$ticker" | sed -n "$i"p` #get one ticker  
		filer_ticker=`echo "$READ_INPUT" | awk -F ';' -v a="$t" '\$2 == a {print \$0}'`

		#GETING LAST KNOWN VALUE 
		last_line=`echo "$filer_ticker" | tail -1`
		last_value=`echo "$last_line" | awk -F ';' '{print \$4}'`

		filter_sell=`echo "$filer_ticker" | awk -F ';' -v a="sell" '\$3 == a {print \$0}'`  #sell value 
		filter_buy=`echo "$filer_ticker" | awk -F ';' -v a="buy" '\$3 == a {print \$0}'`  #sell value 
		SUM1=`echo "$filter_buy" | awk -F ';' '{value = $6}{sum += value}END{printf("%f.16", sum)}'`
		SUM2=`echo "$filter_sell" | awk -F ';' '{value = $6}{sum += value}END{printf("%f.16", sum)}'`

		filter1="$SUM1;$SUM2;$last_value"
		SUM1=`echo "$filter1" | awk -F ';' '{value = (($1-$2)*$3) }END{printf("%05.22f",value)}'`

		var=`awk 'BEGIN{ print "'$SUM1'"<"0" }'` #output = 1 negative number 
		if [ "$var" -eq "0" ]; then #positive num
			SUM1=`echo "$SUM1" | awk -v s=$SUM1 '{v = s - 0.5}END{printf("%f", v)}'`;SUM1=`printf %.0f $SUM1`
			SUM1=`echo "$filter_sell" | awk -v s=$SUM1 -v w=$ONE_CHAR_REPRES '{value = s/w - 0.5}END{printf("%.0f", value)}'`
			for ((j=0; (j < $SUM1) && (j < $WIDTH); j++)); do
				hash_t=`echo "$hash_t#"`
			done	
		else #negaitve num
			
			SUM1=`echo "$SUM1" | awk -v s=$SUM1 '{v = s + 0.5}END{printf("%f", v)}'`;SUM1=`printf %.0f $SUM1`
			SUM1=`echo "$filter_sell" | awk -v s=$SUM1 -v w=$ONE_CHAR_REPRES '{value = s/w + 0.5}END{printf("%.0f", value)}'`
			width_neg=`echo "$filter_sell" | awk -v s=$WIDTH  '{value = s-(2*s)}END{printf("%.0f", value)}'`
			for ((j=0; (j > $SUM1) && (j > $width_neg); j--)); do
				hash_t=`echo "$hash_t!"`;done
		fi	
		FILTER_SUM=`echo "$FILTER_SUM" & echo "$t:$hash_t"`
	done
	d=`echo "$FILTER_SUM" | sort -t ':' -k 1`
	echo "$d" | awk -F ':' '{printf("%-9s : %s  \n"),$1, $2}'
	exit 0
}

##
# Get last price of Tickers sorted by alphabet.
last_price_comm()
{
	#first get thickers and count them 
	ticker=`echo "$READ_INPUT" | awk -F ';' '{print \$2}'`
	ticker=$(echo "$ticker" | sort -u) 
	CHARS_MAX="0"
	
	sum_ticker=`echo "$ticker" | wc -l`
	
	for ((i=1; i <= $sum_ticker; i++)); do    #walk throught tickers 
		t=`echo "$ticker" | sed -n "$i"p` #get one ticker  
		
		# If ticker match with t sum it and print it 
		filer_ticker=`echo "$READ_INPUT" | awk -F ';' -v a="$t" '\$2 == a {print \$0}'`
		#GETING LAST KNOWN VALUE 
		last_line=`echo "$filer_ticker" | tail -1`
		last_value=`echo "$last_line" | awk -F ';' '{print \$4}'`
			
		ch_m=`echo "$last_value" | awk -F ';' -v v="$last_value" 'END{printf("%0.2f",v)}'`;
		ch_m=` echo "$last_value" | wc -c`
		if [ "$ch_m" -gt "$CHARS_MAX" ]; then
			CHARS_MAX="$ch_m"
		fi
		
		FILTER_SUM=`echo "$FILTER_SUM" & echo "$t:$last_value"`
	done
	d=`echo "$FILTER_SUM" | sort -t ':' -k 1`
	
	echo "$d" | awk -F ':' -v l="$CHARS_MAX" '{printf("%-9s :%*.2f\n"),$1, l, $2}'
	
	exit 0
}


##
# Check if inputs files exist. 
bad_argument_error()
{
	if [ ! -f ${GZ_LOG_FILES} ]; then 
		echo "error file doesnt exist." >&2  
		exit 1	
	fi
	if [ ! -f ${LOG_FILES} ]; then
		echo "error file doesnt exist." >&2 
		exit 1	
	fi
	return 0
}

##
# If there are no params it store input from stdin to READ_INPUT
# else it store from given files 
store_input()
{
	# IF THERE ARE NO PARRAMETERS i ll store stdin
	if [ -z "$COMMAND" ] && [ -z "$LOG_FILES" ] && [ -z "$GZ_LOG_FILES" ]; then
		if [ "$IS_T_COM_OR_FIL" -eq "1" ]; then
			echo "ERROR You have to specify ticker ater -t or If there is input from stdin u cant add commands or filters." >&2 
		else
			READ_INPUT="${1:-/dev/stdin}"
			READ_INPUT=$(cat "$READ_INPUT") 
		fi
	elif [ ! -z "$LOG_FILES" ] && [ ! -z "$GZ_LOG_FILES" ]; then
		READ_INPUT=$(gzip -d -c $GZ_LOG_FILES && cat $LOG_FILES)
	elif [ ! -z "$GZ_LOG_FILES" ]; then
		READ_INPUT=$(gzip -d -c $GZ_LOG_FILES)
	else
		READ_INPUT=$(cat $LOG_FILES)
	fi
}

##
# Just call propriate command based on $COMMAND
call_command()
{
	case $COMMAND in
		list-tick)
			list_tick_comm; ;;
		pos)
			pos_comm; ;;
		profit)
			profit_comm; ;;
		last-price)
			last_price_comm; ;;
		hist-ord)
			hist_ord_comm; ;;
		graph-pos)
			graph_pos_comm; ;;
		*)
			;;
	esac
}


argument_parser "$@" 		# Parse arguments and store them.
bad_argument_error		# If program has bad arguments it ll exit with error
store_input			# Store inputs to READ_INPUT 


#FILTER SECTION #################################

# Filter olny before and after time 
FILTER=`echo "$READ_INPUT" | awk -F ';' -v a="$BEFORE_TIME" '\$1 < a {print \$0}'`
READ_INPUT="$FILTER"
FILTER=`echo "$READ_INPUT" | awk -F ';' -v a="$AFTER_TIME" '\$1 > a {print \$0}'`
READ_INPUT="$FILTER"

#Filter by given ticker
if ! [ -z "$THICK" ]; then #if THICK is not empty

	# For every ticker in THICK
	FILTER_SUM=""
	for ((i=1; i <= $THICK_COUNT+1; i++)); do
		one_thick=`echo $THICK | cut -d ";" -f $i`
		FILTER=`echo "$READ_INPUT" | awk -F ';' -v a="$one_thick" '\$2 == a {print \$0}'`
		FILTER_SUM=`echo "$FILTER_SUM" & echo "$FILTER"`
	done
	READ_INPUT=`echo "$FILTER_SUM"`
	READ_INPUT=`echo "$READ_INPUT" | sort -t ";" -k1,1 `
	READ_INPUT=`echo "$READ_INPUT" | grep -v -e '^$'`
fi
#############################

call_command 		# Just call propriate command based on $COMMAND
echo "$READ_INPUT"




