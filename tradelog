#!/bin/sh
export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_us.UTF-8

COMMAND=""		#Store arguments commands 
LOG_FILES=""		##Input file in .log format
GZ_LOG_FILES="" 	#Input file in .gz archiv
READ_INPUT=""		#Here i ll store input logs 
READ_FILTERED=""	#


##
# Just printi help and exit with code 0
print_help()
{
	echo "Usage: tradelog [-h|--help]"
	echo "...... tradelog [FILTER...] [COMAND] [LOG...]"
	echo "DATETIME == YYYY-MM-DD HH:MM:SS"
	echo ""
	echo "COMMANDS"
	echo ".. list-tick .... List of stock echange tickers."
	echo ".. profit ....... List of profit from lock positions."
	echo ".. pos .......... List of values current held positions"
	echo ".. last-price ... Print last value of every known thicker."
	echo ".. hist-ord ..... List history of transaction by thicker."
	echo ".. graph-pos .... Shov value graph of thicker. "
	echo "FILTER"
	echo ". -a DATETIME ... Only records after this date."
	echo ". -b DATETIME ... Only records before this date."
	echo ". -t TICKER ..... Only records with given thicker. You can specify multiple thickers."
	echo ". -w WIDTH ...... Define width of longest row. w > 0"

	exit 0
}

##
# 
after_date_filter()
{
	echo ""
}

##
# 
before_date_filter()
{
	echo ""
}


##
# 
ticker_filter()
{
	echo ""
}

##
# 
width_filter()
{
	echo ""
}

##
#
list_tick_comm()
{
	echo ""
}

##
#
profit_comm()
{
	echo ""
}


##
#
pos_comm()
{
	echo ""
}

##
#
last_price_comm()
{
	echo ""
}


##
#
hist_ord_comm()
{
	echo ""
}

##
#
graph_pos_comm()
{
	echo ""
}

##
# Parse input arguments and COMMANDS 
argument_parser()
{
	if [ "$#" -eq "0" ];then
		return 0	
	fi
	while [ "$#" -gt 0 ]; do

		#COMMAND##################
			case "$1" in #COMMANDS THERE CAN BE ONLY ONE 
		list-tick | pos | profit | last-price | hits-ord | graph-pos )
			COMMAND="$1"
			shift   #argmunet co našel provede a záhodí a nyní má index číslo 1 argmunet číslo 2 protože se to posune 
			;;
	
		#HELP###############
		-h)
			print_help
			;;
		--help)
			print_help
			;;
		#FILTERS#################	
		-a) #after DATETIME
			
			shift
			shift
			;;
		-b) #before DATETIME
			
			shift
			shift
			;;
		-t) #ticker

			shift
			shift
			;;

		-w) #width

			WIDTH="$2"
			shift
			shift
			;;
		
		#LOG#################
		*) #GETING LOG FILES THERE CAN BE MULTIPLE 
			if [ `echo  $1 | grep "\.gz"` ]; then  	#if file ends with .gz
				GZ_LOG_FILES="$1 $GZ_LOG_FILES"		
			else
				LOG_FILES="$1 $LOG_FILES"
			fi
			shift
			;;

		esac
		
	done
}

##
# Check if inputs files exist. 
bad_argument_error()
{
	if [ ! -f ${GZ_LOG_FILES} ]; then 
		>&2 echo "error file doesnt exist."
		exit 1	
	fi
	if [ ! -f ${LOG_FILES} ]; then
		>&2 echo "error file doesnt exist."
		exit 1	
	fi
	return 0
}
##
# If there are no params it store input from stdin to READ_INPUT
# else it store from given files 
store_input()
{
	
	# IF THERE ARE NO PARRAMETERS i ll store stdin
	if [ -z "$COMMAND" ] && [ -z "$LOG_FILES" ] && [ -z "$GZ_LOG_FILES" ]; then
		READ_INPUT="${1:-/dev/stdin}"
		READ_INPUT=$(cat "$READ_INPUT") 
	else
		# TODO add gzip reading 
		echo"tu"	
		READ_INPUT=$(cat $LOG_FILES)
	fi		
}

debug_tempo()
{
	echo "command: $COMMAND"
	echo "gz_l_f:  $GZ_LOG_FILES"
	echo "l_f>     $LOG_FILES"
}



argument_controler_others $@ 	# Call argument controler and send all the program arguments as funct argument. 
argument_parser $@    		# Parse arguments and store them.

bad_argument_error	# If program has bad arguments it ll exit with error
store_input		# Store inputs to READ_INPUT 

#READ_INPUT="gzip -d -c $GZIP | cat $LOG_FILES - | sort"
TICK_FILTER=""
READ_FILTERED="eval $READ_INPUT | awk -F ';' 'if (\$1 > $AFTER_TIME && {print \$0}'"


echo "$READ_INPUT"
echo "$READ_INPUT"

debug_tempo 		# Giv debug information. 

if [ ]; then
	eval "$READ_FILRET_VSTUP | "
fi





